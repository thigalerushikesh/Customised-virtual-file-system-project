#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<iostream>
//#include<io.h>

#define MAXINODE 5

#define READ 1
#define WRITE 2

#define MAXFILESIZE 2048

#define REGULAR 1
#define SPACIAL 2

#define START 0
#define CURRENT 1
#define END 2

typedef struct superblock
{
    int totalinodes;
    int freeinode; 
}superblock,*PSUPERBLOCK;

typedef struct inode
{
    char filename[50];
    int inodenumber;
    int filesize;
    int fileactualsize;
    int filetype;
    char *buffer;
    int linkcount;
    int referencecount;
    int permission;
    struct inode *next;
}INODE,*PINODE,**PPINODE;

typedef struct filetable
{
    int readoffset;
    int writeoffset;
    int count;
    int mode;
    PINODE ptrinode;
}FILETABLE,*PFILETABLE;

typedef struct ufdt
{
    PFILETABLE ptrfiletable;
}UFDT;

UFDT UFDTArr[50];
superblock superblockkobj;
PINODE head = NULL;

void man(char *name)
{
    if(name == NULL)return;

    if(strcmp(name,"create")==0)
    {
        printf("description : used to create new regular file\n");
        printf("usage : create file_name permission\n");
    }
    else if(strcmp(name,"read")==0)
    {
        printf("description : used to read data from regular file\n");
        printf("usage : read file_name no_of_byte_to_read\n");
    }
    else if(strcmp(name,"write")==0)
    {
        printf("description : used to write into regular file\n");
        printf("usage : write file_name\n after this enter the data that we want to write\n");
    }
    else if(strcmp(name,"is")==0)
    {
        printf("description : used to list all information of file\n");
        printf("usage : is \n");
    }
    else if(strcmp(name,"stat")==0)
    {
        printf("description : used to display information of file\n");
        printf("usage : stat file_name\n");
    }
    else if(strcmp(name,"fstat")==0)
    {
        printf("description : used to display information of file\n");
        printf("usage :state filr_description\n");
    }
    else if(strcmp(name,"open")==0)
    {
        printf("description : used to remove data from file\n");
        printf("usage : truncate file_name\n");
    }
    else if(strcmp(name,"open")==0)
    {
        printf("description : used to open existing file\n");
        printf("used : open file_name mode\n");
    }
    else if(strcmp(name,"close")==0)
    {
        printf("description : used to closed open file\n");
        printf("usage : open file_name mode\n");
    }
    else if(strcmp(name,"closeall")==0)
    {
        printf("description : used to close all opened file\n");
        printf("usage : closeall\n");
    }
    else if(strcmp(name,"iseek")==0)
    {
        printf("description : used to chane file offset\n");
        printf("usage : iseek file_name changeinoffset startpoint\n");
    }
    else if(strcmp(name,"rm")==0)
    {
        printf("description : used to delete the file\n");
        printf("usage :  rm file_name\n");
    }
    else
    {
        printf("ERROR : no manual entry availbale.\n");
    }
}

void displayhelp()
{
    printf("is : to list out all files\n");
    printf("clear : to clear console\n");
    printf("open : to open the file\n");
    printf("close : to close the file\n");
    printf("closeall : to close all opened file");
    printf("read : to read the content into file\n");
    printf("write : to write content into file");
    printf("exit : to terminate file system\n");
    printf("stat : to display imformation of file using name\n");
    printf("fstat : to dispaly information of file using file description\n");
    printf("truncate : to remove all data from file\n");
    printf("rm : top delete the file\n");
}

int getfdfromname(char *name)
{
    int i = 0;

    while(i<50)
    {
        if(UFDTArr[i].ptrfiletable != NULL)
          if(strcmp((UFDTArr[i].ptrfiletable->ptrinode->filename),name)==0)
          break;
          i++;
    }

     if(i==50) return -1;
     else        return i;
}

PINODE get_inode(char * name)
{
    PINODE temp = head;
    int i = 0;

    if(name == NULL)
        return NULL;

        while(temp != NULL)
        {
            if(strcmp(name,temp->filename)==0)
            break;
            temp = temp->next;
        }
        return temp;
}

void createdilb()
{
    int i = 1;
    PINODE newn = NULL;
    PINODE temp = head;

    while(i<=MAXINODE)
    {
        newn = (PINODE)malloc(sizeof(INODE));

        newn->linkcount=0;
        newn->referencecount=0;
        newn->filetype=0;
        newn->filesize=0;

        newn->buffer=NULL;
        newn->next=NULL;

        newn->inodenumber=i;

        if(temp == NULL)
        {
            head = newn;
            temp = head;
        }
        else
        {
            temp->next=newn;
            temp=temp->next;
        }
        i++;
    }
    printf("dilb created successfully\n");
}

void initialisesuperblock()
{
int i = 0;
while(i<MAXINODE)
{
    UFDTArr[i].ptrfiletable=NULL;
    i++;
}

superblockkobj.totalinodes=MAXINODE;
superblockkobj.freeinode=MAXINODE;
}

int createfile(char *name,int permission)
{
    int i=0;
    PINODE temp = head;

    if((name == NULL)||(permission == 0)||(permission > 3))
    return -1;

    if(superblockkobj.freeinode == 0)
    return -2;

    (superblockkobj.freeinode)--;

    if(get_inode(name)!=NULL)
    return -3;

    while(temp!=NULL)
    {
        if(temp->filetype==0)
        break;
        temp=temp->next;
    }

    while(i<50)
    {
        if(UFDTArr[i].ptrfiletable==NULL)
        break;
        i++;
    }

    UFDTArr[i].ptrfiletable=(PFILETABLE)malloc(sizeof(FILETABLE));

    UFDTArr[i].ptrfiletable->count = 1;
    UFDTArr[i].ptrfiletable->mode = permission;
    UFDTArr[i].ptrfiletable->readoffset = 0;
    UFDTArr[i].ptrfiletable->writeoffset = 0;

    UFDTArr[i].ptrfiletable->ptrinode = temp;

    strcpy(UFDTArr[i].ptrfiletable->ptrinode->filename,name);
    UFDTArr[i].ptrfiletable->ptrinode->filetype = REGULAR;
    UFDTArr[i].ptrfiletable->ptrinode->referencecount = 1;
    UFDTArr[i].ptrfiletable->ptrinode->linkcount = 1;
    UFDTArr[i].ptrfiletable->ptrinode->filesize = MAXFILESIZE;
    UFDTArr[i].ptrfiletable->ptrinode->fileactualsize = 0;
    UFDTArr[i].ptrfiletable->ptrinode->permission = permission;
    UFDTArr[i].ptrfiletable->ptrinode->buffer = (char*)malloc(MAXFILESIZE);

    return i;
}

//rm_file("demo.txt")
int rm_file(char * name)
{
    int fd = 0;

    fd = getfdfromname(name);
    if(fd == -1)
    return -1;

    (UFDTArr[fd].ptrfiletable->ptrinode->linkcount)--;

    if(UFDTArr[fd].ptrfiletable->ptrinode->linkcount == 0)
    {
        UFDTArr[fd].ptrfiletable->ptrinode->filetype = 0;
    //free(UFDTArr[fd].ptrfiletable->ptrinode->buffer);
       free(UFDTArr[fd].ptrfiletable);
    }

    UFDTArr[fd].ptrfiletable = NULL;
    (superblockkobj.freeinode)++;
}

int readfile(int fd,char *arr,int isize)
{
    int read_size = 0;

    if(UFDTArr[fd].ptrfiletable==NULL) return -1;

    if(UFDTArr[fd].ptrfiletable -> mode != READ && UFDTArr[fd].ptrfiletable->mode != READ+WRITE)
    return -2;
    if(UFDTArr[fd].ptrfiletable->ptrinode->permission!=READ && UFDTArr[fd].ptrfiletable->ptrinode->permission!=READ+WRITE)return -2;

    if(UFDTArr[fd].ptrfiletable->readoffset == UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize) return -3;

    if(UFDTArr[fd].ptrfiletable->ptrinode->filetype!=REGULAR) return -4;

    read_size = (UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)-(UFDTArr[fd].ptrfiletable->readoffset);
    if(read_size<isize)
    {
        strncpy(arr,(UFDTArr[fd].ptrfiletable->ptrinode->buffer)+(UFDTArr[fd].ptrfiletable->readoffset),read_size);

        UFDTArr[fd].ptrfiletable->readoffset = UFDTArr[fd].ptrfiletable->readoffset+read_size;
    }
    else
    {
        strncpy(arr,(UFDTArr[fd].ptrfiletable->ptrinode->buffer)+(UFDTArr[fd].ptrfiletable->readoffset),isize);

        (UFDTArr[fd].ptrfiletable->readoffset)=(UFDTArr[fd].ptrfiletable->readoffset)+isize;
    }

    return isize;
}

int WriteFile(int fd,char *arr,int isize)
{
    if(((UFDTArr[fd].ptrfiletable->mode)!=WRITE)&&((UFDTArr[fd].ptrfiletable->mode)!=READ+WRITE)) return -1;

    if(((UFDTArr[fd].ptrfiletable->ptrinode->permission)!=WRITE)&&((UFDTArr[fd].ptrfiletable->ptrinode->permission)!=READ+WRITE)) return -1;

    if((UFDTArr[fd].ptrfiletable->writeoffset)==MAXFILESIZE) return -2;

    if((UFDTArr[fd].ptrfiletable->ptrinode->filetype)!=REGULAR) return -3;
    
    strncpy((UFDTArr[fd].ptrfiletable->ptrinode->buffer)+(UFDTArr[fd].ptrfiletable->writeoffset),arr,isize);
    
    (UFDTArr[fd].ptrfiletable->writeoffset)=(UFDTArr[fd].ptrfiletable->writeoffset)+isize;

    (UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)=(UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)+isize;

    return isize;
}

int Openfile(char *name,int mode)
{
    int i = 0;
    PINODE temp = NULL;
    
    if(name == NULL || mode <= 0)
    return -1;

    temp = get_inode(name);
    if(temp == NULL)
    return -2;

    if(temp->permission < mode)
    return -3;

    while(i<50)
    {
        if(UFDTArr[i].ptrfiletable == NULL)
        break;
        i++;
    }

    UFDTArr[i].ptrfiletable = (PFILETABLE)malloc(sizeof(FILETABLE));
    if(UFDTArr[i].ptrfiletable == NULL) return -1;
    UFDTArr[i].ptrfiletable->count = 1;
    UFDTArr[i].ptrfiletable->mode = mode;
    if(mode == READ + WRITE)
    {
        UFDTArr[i].ptrfiletable->readoffset = 0;
        UFDTArr[i].ptrfiletable->writeoffset = 0;
    }
    else if(mode == READ)
    {
        UFDTArr[i].ptrfiletable->readoffset = 0;
    }
    else if(mode == WRITE)
    {
        UFDTArr[i].ptrfiletable->writeoffset = 0;
    }
    UFDTArr[i].ptrfiletable->ptrinode = temp;
    (UFDTArr[i].ptrfiletable->ptrinode->referencecount)++;

    return i;
}

void CloseFileByName(int fd)
{
    UFDTArr[fd].ptrfiletable->readoffset = 0;
    UFDTArr[fd].ptrfiletable->writeoffset = 0;
    (UFDTArr[fd].ptrfiletable->ptrinode->referencecount)--;
}

int CloseFileByName(char * name)
{
    int i = 0;
    i = getfdfromname(name);
    if(i==-1)
    return -1;

    UFDTArr[i].ptrfiletable->readoffset = 0;
    UFDTArr[i].ptrfiletable->writeoffset = 0;
    (UFDTArr[i].ptrfiletable->ptrinode->referencecount)--;

    return 0;
}

void CloseAllFile()
{
    int i = 0;
    while(i<50)
    {
        if(UFDTArr[i].ptrfiletable!= NULL)
        {
            UFDTArr[i].ptrfiletable->readoffset = 0;
            UFDTArr[i].ptrfiletable->writeoffset = 0;
            (UFDTArr[i].ptrfiletable->ptrinode->referencecount)--;
            break;
        }
        i++;
    }
}

int LseekFile(int fd,int size,int from)
{
    if((fd<0)||(from>2)) return -1;
    if(UFDTArr[fd].ptrfiletable == NULL) return -1;

    if((UFDTArr[fd].ptrfiletable->mode == READ)||(UFDTArr[fd].ptrfiletable->mode==READ + WRITE))
    {
        if(from==CURRENT)
        {
            if(((UFDTArr[fd].ptrfiletable->readoffset)+size)>UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize) return -1;
            if(((UFDTArr[fd].ptrfiletable->readoffset)+size)<0) return-1;
            (UFDTArr[fd].ptrfiletable->readoffset)=(UFDTArr[fd].ptrfiletable->readoffset)+size;
        }
        else if(from == START)
        {
            if(size>(UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)) return -1;
            if(size<0) return -1;
            (UFDTArr[fd].ptrfiletable->readoffset)=size;
        }
        else if(from == END)
        {
            if((UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)+size>MAXFILESIZE) return -1;
            if(((UFDTArr[fd].ptrfiletable->readoffset)+size)<0) return -1;
            (UFDTArr[fd].ptrfiletable->readoffset)= (UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)+size;
        }
    }
    else if(UFDTArr[fd].ptrfiletable->mode == WRITE)
    {
        if(from == CURRENT)
        {
            if(((UFDTArr[fd].ptrfiletable->writeoffset)+size)>MAXFILESIZE) return -1;
            if(((UFDTArr[fd].ptrfiletable->writeoffset)+size)<0) return -1;
            if(((UFDTArr[fd].ptrfiletable->writeoffset)+size)>(UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize))
            (UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)=(UFDTArr[fd].ptrfiletable->writeoffset)+size;
            (UFDTArr[fd].ptrfiletable->writeoffset)=(UFDTArr[fd].ptrfiletable->writeoffset)+size;
        }
        else if(from == START)
        {
            if(size>MAXFILESIZE) return -1;
            if(size<0) return -1;
            if(size > (UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize))
            (UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)=size;
            (UFDTArr[fd].ptrfiletable->writeoffset)= size;
        }
        else if(from == END)
        {
            if((UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)+size>MAXFILESIZE) return -1;
            if(((UFDTArr[fd].ptrfiletable->writeoffset)+size)<0) return -1;
            (UFDTArr[fd].ptrfiletable->writeoffset)=(UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize)+size;
        }
    }
}

void ls_file()
{
    int i = 0;
    PINODE temp = head;

    if(superblockkobj.freeinode == MAXINODE)
    {
        printf("error : there are no files\n");
        return;
    }

    printf("\nfile name\tOnode num,ber\t file size\t link count\n");
    printf("------------------------------------------------------\n");
    while(temp != NULL)
    {
        if(temp->filetype!=0)
        {
            printf("%s\t\t%d\t\t%d\n",temp->filename,temp->inodenumber,temp->fileactualsize,temp->linkcount);
        }
        temp = temp->next;
    }
    printf("----------------------------------------------------------");
}

int fstat_file(int fd)
{
    PINODE temp = head;
    int i = 0;

    if(fd<0) return -1;

    if(UFDTArr[fd].ptrfiletable == NULL) return -2;

    temp = UFDTArr[fd].ptrfiletable->ptrinode;

    printf("\n---------Statistical Information About File-------------\n");
    printf("file name : %s\n",temp->filename);
    printf("inode number %d\n",temp->inodenumber);
    printf("file size %d\n",temp->filesize);
    printf("actual file size : %d\n",temp->fileactualsize);
    printf("link count : %d\n",temp->linkcount);
    printf("refrerence count : %d\n",temp->referencecount);

    if(temp->permission == 1)
         printf("file permission : read only\n");
    else if(temp->permission == 2)
         printf("file permission : write\n");
    else if(temp->permission == 3)
        printf("file permission : read & write\n");
    printf("----------------------------------------------------------\n\n");

return 0;
}

int stat_file(char *name)
{
    PINODE temp = head;
    int i = 0;

    if(name == NULL) return -1;

    while(temp!=NULL)
    {
        if(strcmp(name,temp->filename)==0)
        break;
        temp = temp->next;
    }

    if(temp == NULL) return -2;

    printf("\n-------statistical information about file---------\n");
    printf("file name : %S\n",temp->filename);
    printf("inode number %d\n",temp->inodenumber);
    printf("file size : %d\n",temp->filesize);
    printf("actual file size : %d\n",temp->fileactualsize);
    printf("link count : %d\n",temp->linkcount);
    printf("refrence count : %d\n",temp->referencecount);

    if(temp->permission == 1)
      printf("file permission : read only\n");
    else if(temp->permission == 2)
      printf("file permission : write\n");
    else if(temp->permission == 3)
       printf("file permission : read & write\n");
    printf("---------------------------------------------------\n\n");

    return 0;
}

int truncate_file(char* name)
{
    int fd = getfdfromname(name);
    if(fd== -1)
    return -1;

    memset(UFDTArr[fd].ptrfiletable->ptrinode->buffer,0,1024);
    UFDTArr[fd].ptrfiletable->readoffset = 0;
    UFDTArr[fd].ptrfiletable->writeoffset = 0;
    UFDTArr[fd].ptrfiletable->ptrinode->fileactualsize = 0;
}

int main()
{
    char *ptr = NULL;
    int ret = 0,fd = 0,count = 0;
    char command[4][80],str[80],arr[1024];

    initialisesuperblock();
    createdilb();

    while(1)
    {
        fflush(stdin);
        strcpy(str,"");
    
    printf("\n Marvellous VFS : > ");

    fgets(str,80,stdin);//scanf("%[^'\n']s,str");

    count = sscanf(str,"%s %s %s %s",command[0],command[1],command[2],command[3]);

    if(count == 1)
    {
        if(strcmp(command[0],"is")==0)
        {
            ls_file();
        }
        else if(strcmp(command[0],"closeall")==0)
        {
            CloseAllFile();
            printf("all file closed succesfully\n");
            continue;
        }
        else if(strcmp(command[0],"clear")==0)
        {
            system("cls");
            continue;
        }
        else if(strcmp(command[0],"help")==0)
        {
            displayhelp();
            continue;
        }
        else if(strcmp(command[0],"exit")==0)
        {
            printf("terminating the marvellous virtual file system \n");
            break;
        }
        else
        {
            printf("\nERROR : command not found !!!\n");
            continue;
        }
    }
    else if(count == 2)
    {
        if(strcmp(command[0],"stat")==0)
        {
            ret = stat_file(command[1]);
            if(ret == -1)
               printf("Error :  incorrect parameter\n");
            if(ret == -2)
               printf("Error : there is no such file\n");
            continue;
        }
        else if(strcmp(command[0],"fstat") == 0)
        {
            ret = fstat_file(atoi(command[1]));
            if(ret == -1)
               printf("error : incorrect parameter\n");
            if(ret == -2)
               printf("error : thre is no such file\n");
            continue;
        }
        else if(strcmp(command[0],"close")==0)
        {
            ret = CloseFileByName(command[1]);
            if(ret == -1)
               printf("error : thre is no such file \n");
               continue;
        }
        else if(strcmp(command[0],"rm")==0)
        {
            ret = rm_file(command[1]);
            if(ret == -1)
                printf("error : there is no such file\n");
                continue;
        }
        else if(strcmp(command[0],"man")==0)
        {
            man(command[1]);
        }
        else if(strcmp(command[0],"write")==0)
        {
            fd = getfdfromname(command[1]);
            if(fd == -1)
            {
              printf("error : incorrect parameter\n");
              continue;
            }
            printf("enter the data : \n");
            scanf("%[^\n]",arr);

            ret = strlen(arr);
            if(ret == 0)
            {
                printf("error : incorrect parameter\n");
                continue;
            }
            ret = WriteFile(fd,arr,ret);
            if(ret == -1)
              printf("error : permission denaid\n");
            if(ret == -2)
              printf("error ; there is no sufficiant memory to write \n");
            if(ret == -3)
              printf("error : it is not regular file\n");
        }
        else if(strcmp(command[0],"truncate")==0)
        {
            ret = truncate_file(command[1]);
            if(ret == -1)
               printf("error : incorrect parameter\n");
        }
        else
        {
            printf("\nERROR  : command not found !!!\n");
            continue;
        }
    }
    else if(count == 3)
    {
         if(strcmp(command[0],"create")==0)
         {
            ret = createfile(command[1],atoi(command[2]));
            if(ret >= 0)
                printf("file is succesfully created with file descreptor : %d\n",ret);
            if(ret == -1)
                printf("error : incorrect parameters \n");
            if(ret == -2)
                printf("error : there is no innodes\n");
            if(ret == -3)
                printf("error : file already exixts\n");
            if(ret == -4)
                printf("error : memory allocation failuar\n");
            continue;
         }
         else if(strcmp(command[0],"open")==0)
         {
            ret = Openfile(command[1],atoi(command[2]));
            if(ret >= 0)
               printf("file is succesfully opened with file descriptor : %d\n",ret);
            if(ret == -1)
               printf("error : incorect parameter\n");
            if(ret == -2)
               printf("error : file not present\n");
            if(ret == -3)
              printf("error : permission denaid\n");
            continue;
         }
         else if(strcmp(command[0],"read")== 0)
         {
            fd = getfdfromname(command[1]);
            if(fd == -1)
            {
                printf("error : incorect parameter\n");
                continue;
            }
            ptr = (char *)malloc(sizeof(atoi(command[2]))+1);
            if(ptr == NULL)
            {
                printf("error : memory allocation failuar\n");
                continue;
            }
            ret = readfile(fd,ptr,atoi(command[2]));
            if(ret == -1)
                printf("error : file not existing[2]");
            if(ret == -2)
                printf("error : permission denaid\n");
            if(ret == -3)
                printf("error : reached at end of file \n");
            if(ret == -4)
                printf("error : it is not regular file\n");
            if(ret == 0)
                printf("errror ; file empty\n");
            if(ret > 0)
            {
                WriteFile(2,ptr,ret);
            }
            continue;
         }
         else
         {
            printf("\n ERROR : command not found !!!\n");
            continue;
         }
    }
        else if(count == 4)
        {
            if(strcmp(command[0],"iseek")==0)
            {
                fd = getfdfromname(command[1]);
                if(fd == -1)
                {
                    printf("error : incorrect parameter\n");
                    continue;
                }
                ret = LseekFile(fd,atoi(command[2]),atoi(command[3]));
                if(ret == -1)
                {
                    printf("error : unable to perform lseek\n");
                }
            }
            else
            {
                printf("\n ERROR : command not found !!!\n");
                continue;
            }
        }
        else
        {
            printf("\n ERROR : comand not found !!!\n");
            continue;
        }
    }
    return 0;
}
